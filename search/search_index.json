{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the User Manual for Tool 2 This Tool is part of a suite of genome analysis tools that explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , partly funded by Innovate UK as part of a knowledge transfer partnership (KTP) . What is Tool 2 for? Tool 2 screens genome assemblies for specific genes (or any DNA sequence) of your choosing. What does Tool 2 do? Firstly, Tool 2 takes your custom sequences (subject) and makes a database using BLAST. Secondly, Tool 2 uses this database to screen assembled genomes with the ABRicate application. And thirdly, Tool 2 makes a summary. Tool 2 screens all genomes in the input_genomes folder. The genome assemblies for all the sequenced strains are saved in the LIBRARY folder.","title":"Introduction"},{"location":"index.html#welcome-to-the-user-manual-for-tool-2","text":"This Tool is part of a suite of genome analysis tools that explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , partly funded by Innovate UK as part of a knowledge transfer partnership (KTP) .","title":"Welcome to the User Manual for Tool 2"},{"location":"index.html#what-is-tool-2-for","text":"Tool 2 screens genome assemblies for specific genes (or any DNA sequence) of your choosing.","title":"What is Tool 2 for?"},{"location":"index.html#what-does-tool-2-do","text":"Firstly, Tool 2 takes your custom sequences (subject) and makes a database using BLAST. Secondly, Tool 2 uses this database to screen assembled genomes with the ABRicate application. And thirdly, Tool 2 makes a summary. Tool 2 screens all genomes in the input_genomes folder. The genome assemblies for all the sequenced strains are saved in the LIBRARY folder.","title":"What does Tool 2 do?"},{"location":"access_2.html","text":"Logging in Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder. Opening a stable connection (recommended) You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Accessing the server"},{"location":"access_2.html#logging-in","text":"Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder.","title":"Logging in"},{"location":"access_2.html#opening-a-stable-connection-recommended","text":"You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Opening a stable connection (recommended)"},{"location":"custom_2.html","text":"Preparing your input sequence file Format of the file contents The sequences you wish to query must be saved a plain text (multi) fasta format. You can use any text editor. Ideally the header lines (those starting with '>') will have the following format: >customSeq~~~ID~~~ACC~~~RESISTANCES DESC where, customSeq is the database name, e.g. 12P or FAE ID is the gene name ACC is an accession number of the sequence source RESISTANCES is the phenotype(s) to report DESC can be any textual description Important The maximum length of >customSeq~~~ID~~~ACC~~~RESISTANCES DESC is 50 characters. Use only letters, numbers and '_'. The position of the '>', '~' and space are important. Example >12P~~~Lbr_pduC~~~LVIS_RS19425~~~RES pduC_Lactobacillus brevis ATCC 367 Format of the filename Save the file as <customSeq>_sequences.fa , replacing <customSeq> with your chosen database name Example 12P_sequences.fa or FAE_sequences.fa","title":"Preparing custom sequences"},{"location":"custom_2.html#preparing-your-input-sequence-file","text":"","title":"Preparing your input sequence file"},{"location":"custom_2.html#format-of-the-file-contents","text":"The sequences you wish to query must be saved a plain text (multi) fasta format. You can use any text editor. Ideally the header lines (those starting with '>') will have the following format: >customSeq~~~ID~~~ACC~~~RESISTANCES DESC where, customSeq is the database name, e.g. 12P or FAE ID is the gene name ACC is an accession number of the sequence source RESISTANCES is the phenotype(s) to report DESC can be any textual description Important The maximum length of >customSeq~~~ID~~~ACC~~~RESISTANCES DESC is 50 characters. Use only letters, numbers and '_'. The position of the '>', '~' and space are important. Example >12P~~~Lbr_pduC~~~LVIS_RS19425~~~RES pduC_Lactobacillus brevis ATCC 367","title":"Format of the file contents"},{"location":"custom_2.html#format-of-the-filename","text":"Save the file as <customSeq>_sequences.fa , replacing <customSeq> with your chosen database name Example 12P_sequences.fa or FAE_sequences.fa","title":"Format of the filename"},{"location":"faq_2.html","text":"What information does Tool 2 need? You need to provide Tool 2 with two pieces of information. First, the custom sequences, which Tool 2 will convert to a database. These must be saved in a multi-fasta file; the format of this file is important. Tool 2 looks for this file in the input_custom_seqs folder. Secondly, the genomes you wish to query must be saved in the input folder, input_genomes . Tool 2 screens all genomes in this folder. The LIBRARY folder contains the genome assemblies for all the sequenced strains. How do you run Tool 2? Once you have accessed Tool 2 and provided the two required inputs, you can set up a stable connection (optional, but recommended), enter a single command and the results will be deposited in the output folder. What are the different folders? The Tool 2 file system contains the following folders: Directory names Description of contents input_custom_seqs/ The multi-fasta files containing custom sequences ( *.fa ) input_genomes/ Tool 2 will screen all genomes in this folder ( *.fa ). LIBRARY/ The genome assembly files ( *.fa ) for all sequenced isolates. output_tool_2/ Your output data will be deposited here in subdirectories named xxx_i(yy)_c(zz)_YYYY-MM-DD_HH:MM , where xxx is the database, yy is the identity and zz is the coverage. This is followed by the date and time the run was started. work/ The Nextflow working directory. What documents are made by Tool 2? Each time Tool 2 runs it makes an output folder named according to the run parameters, date and time. In the output folder Tool 2 deposits the documents in 2 sub-folders: isolate and summary . In the isolate folder there will be a results file for each genome assembly. In the summary folder there will be a single document summarising all \u2018hits\u2019 results. Tool 2 also reports information about the run. In the run output folder you will find: run_parameters.txt This text document lists: the name of the database used (xxx), the minimum DNA %identity (yy) and the minimum DNA %coverage (zz). Ignore \u2018help=false\u2019. This is an expected byproduct of the help/usage message. abricate_version.txt a text document which reports the version of abricate used for the run <xxx>_sequences.fa the custom sequences file used for the run. How do you view the output files? You can open the files in a spreadsheet, e.g. MS Excel. The output files are in .tab format. The run_parameters.txt document can be opened in any text editor. Can I change the settings of Tool 2? Yes, you can modify the two different settings: identity and coverage . Using the default settings there must be a minimum DNA identity of 75%, and a minimum DNA coverage of 0% for a match to be recorded. These can be altered when you set Tool 2 to run. For all runs, the settings are recorded in the name of the newly created output folder, e.g. the results of a run on May 21st 2021 started at 1.30 pm using the resfinder database and default settings will be stored in this folder: 12P-i80-c80__2021-05-21_13:15/ . Is there a limit to how many genome assemblies Tool 2 can screen? The smallest number of genome assemblies Tool 2 can screen is one. There is no upper limit, although practically speaking the upper limit will be defined by the size of the server. Tool 2 will screen 100 bacterial genome assemblies in ~10 minutes. Where can I find further information about Tool 2? Tool 1 uses a software tool named ABRicate. It was developed by Torsten Seemann and Bj\u00f6rn Gr\u00fcning in Melborne, Australia. The ABRicate information page can be found here on GitHub. You can find further information about the BLAST tool makeblastdb here . makeblastdb produces BLAST databases from FASTA files.","title":"FAQs"},{"location":"faq_2.html#what-information-does-tool-2-need","text":"You need to provide Tool 2 with two pieces of information. First, the custom sequences, which Tool 2 will convert to a database. These must be saved in a multi-fasta file; the format of this file is important. Tool 2 looks for this file in the input_custom_seqs folder. Secondly, the genomes you wish to query must be saved in the input folder, input_genomes . Tool 2 screens all genomes in this folder. The LIBRARY folder contains the genome assemblies for all the sequenced strains.","title":"What information does Tool 2 need?"},{"location":"faq_2.html#how-do-you-run-tool-2","text":"Once you have accessed Tool 2 and provided the two required inputs, you can set up a stable connection (optional, but recommended), enter a single command and the results will be deposited in the output folder.","title":"How do you run Tool 2?"},{"location":"faq_2.html#what-are-the-different-folders","text":"The Tool 2 file system contains the following folders: Directory names Description of contents input_custom_seqs/ The multi-fasta files containing custom sequences ( *.fa ) input_genomes/ Tool 2 will screen all genomes in this folder ( *.fa ). LIBRARY/ The genome assembly files ( *.fa ) for all sequenced isolates. output_tool_2/ Your output data will be deposited here in subdirectories named xxx_i(yy)_c(zz)_YYYY-MM-DD_HH:MM , where xxx is the database, yy is the identity and zz is the coverage. This is followed by the date and time the run was started. work/ The Nextflow working directory.","title":"What are the different folders?"},{"location":"faq_2.html#what-documents-are-made-by-tool-2","text":"Each time Tool 2 runs it makes an output folder named according to the run parameters, date and time. In the output folder Tool 2 deposits the documents in 2 sub-folders: isolate and summary . In the isolate folder there will be a results file for each genome assembly. In the summary folder there will be a single document summarising all \u2018hits\u2019 results. Tool 2 also reports information about the run. In the run output folder you will find: run_parameters.txt This text document lists: the name of the database used (xxx), the minimum DNA %identity (yy) and the minimum DNA %coverage (zz). Ignore \u2018help=false\u2019. This is an expected byproduct of the help/usage message. abricate_version.txt a text document which reports the version of abricate used for the run <xxx>_sequences.fa the custom sequences file used for the run.","title":"What documents are made by Tool 2?"},{"location":"faq_2.html#how-do-you-view-the-output-files","text":"You can open the files in a spreadsheet, e.g. MS Excel. The output files are in .tab format. The run_parameters.txt document can be opened in any text editor.","title":"How do you view the output files?"},{"location":"faq_2.html#can-i-change-the-settings-of-tool-2","text":"Yes, you can modify the two different settings: identity and coverage . Using the default settings there must be a minimum DNA identity of 75%, and a minimum DNA coverage of 0% for a match to be recorded. These can be altered when you set Tool 2 to run. For all runs, the settings are recorded in the name of the newly created output folder, e.g. the results of a run on May 21st 2021 started at 1.30 pm using the resfinder database and default settings will be stored in this folder: 12P-i80-c80__2021-05-21_13:15/ .","title":"Can I change the settings of Tool 2?"},{"location":"faq_2.html#is-there-a-limit-to-how-many-genome-assemblies-tool-2-can-screen","text":"The smallest number of genome assemblies Tool 2 can screen is one. There is no upper limit, although practically speaking the upper limit will be defined by the size of the server. Tool 2 will screen 100 bacterial genome assemblies in ~10 minutes.","title":"Is there a limit to how many genome assemblies Tool 2 can screen?"},{"location":"faq_2.html#where-can-i-find-further-information-about-tool-2","text":"Tool 1 uses a software tool named ABRicate. It was developed by Torsten Seemann and Bj\u00f6rn Gr\u00fcning in Melborne, Australia. The ABRicate information page can be found here on GitHub. You can find further information about the BLAST tool makeblastdb here . makeblastdb produces BLAST databases from FASTA files.","title":"Where can I find further information about Tool 2?"},{"location":"loading_2.html","text":"Loading your query genomes Tool 2 requires two inputs: a file containing the subject sequences ( <customSeq>_sequences.fa ), and the query genome assemblies. These must be saved in the correct input folders: save the subject sequence file in input_custom_seqs/ folder. save the query genome assemblies in Tool 2\u2019s input_genomes/ folder. Preparing the custom sequences is described here . The assembled genomes can be found in the LIBRARY folder.","title":"Loading inputs"},{"location":"loading_2.html#loading-your-query-genomes","text":"Tool 2 requires two inputs: a file containing the subject sequences ( <customSeq>_sequences.fa ), and the query genome assemblies. These must be saved in the correct input folders: save the subject sequence file in input_custom_seqs/ folder. save the query genome assemblies in Tool 2\u2019s input_genomes/ folder. Preparing the custom sequences is described here . The assembled genomes can be found in the LIBRARY folder.","title":"Loading your query genomes"},{"location":"options_2.html","text":"Additional settings Tool 2 has two additional settings that you can change: identity and coverage . Identity is used to specify the minimum DNA identity (default: 75). Coverage is used to specifiy the minimum DNA coverage (default: 0). You can specify these settings in the same way that you specified the database by using: --identity 'yy' --coverage 'zz' The command will look like this: nextflow run tool_2.nf --customSeq 'xxx' --identity 'yyy' --coverage 'zzz' Substitute xxx +/ yy +/ zz with the actual parameter you wish to use. Example 1 nextflow run tool_2.nf --customSeq 'cerys' --coverage '90' Tool 2 will run using the cerys database, default 80% minimum DNA identity and 90% minimum DNA coverage. Example 2 nextflow run tool_2.nf --identity '70' --coverage '75' Tool 2 will run using the default test database, 70% minimum DNA identity and 75% minimum DNA coverage.","title":"Customisation"},{"location":"options_2.html#additional-settings","text":"Tool 2 has two additional settings that you can change: identity and coverage . Identity is used to specify the minimum DNA identity (default: 75). Coverage is used to specifiy the minimum DNA coverage (default: 0). You can specify these settings in the same way that you specified the database by using: --identity 'yy' --coverage 'zz' The command will look like this: nextflow run tool_2.nf --customSeq 'xxx' --identity 'yyy' --coverage 'zzz' Substitute xxx +/ yy +/ zz with the actual parameter you wish to use. Example 1 nextflow run tool_2.nf --customSeq 'cerys' --coverage '90' Tool 2 will run using the cerys database, default 80% minimum DNA identity and 90% minimum DNA coverage. Example 2 nextflow run tool_2.nf --identity '70' --coverage '75' Tool 2 will run using the default test database, 70% minimum DNA identity and 75% minimum DNA coverage.","title":"Additional settings"},{"location":"quick_2.html","text":"Quick start commands Navigate to Tool 2 /genomics/home/vol-genomics/genome_tools/Tool_2 Deposit the assembled genomes of the strains you want to compare in the input_genomes folder. Deposit the sequences for mass screening in the input_custom_seqs folder. Set up a stable connection using the command tmux new -s 'name' Initiate Tool 2 using the command nextflow run tool_2.nf [options] Your results will be saved in /Tool_2/output_tool2 Options Term Description Default --customSeq 'xxx' name chosen by user test --identity 'yy' minimum DNA %identity 75 --coverage 'zz' minimum DNA %coverage 0 Example nextflow run tool_2.nf --customSeq '12P' --identity '90' --coverage '75' Tool 2 will run using 75% minimum DNA coverage and 90% minimum DNA identity, and name the output folder 12P. Tip To view the Quick start instructions from the command line use: nextflow run tool_2.nf --help","title":"Quick start"},{"location":"quick_2.html#quick-start-commands","text":"Navigate to Tool 2 /genomics/home/vol-genomics/genome_tools/Tool_2 Deposit the assembled genomes of the strains you want to compare in the input_genomes folder. Deposit the sequences for mass screening in the input_custom_seqs folder. Set up a stable connection using the command tmux new -s 'name' Initiate Tool 2 using the command nextflow run tool_2.nf [options] Your results will be saved in /Tool_2/output_tool2","title":"Quick start commands"},{"location":"quick_2.html#options","text":"Term Description Default --customSeq 'xxx' name chosen by user test --identity 'yy' minimum DNA %identity 75 --coverage 'zz' minimum DNA %coverage 0 Example nextflow run tool_2.nf --customSeq '12P' --identity '90' --coverage '75' Tool 2 will run using 75% minimum DNA coverage and 90% minimum DNA identity, and name the output folder 12P. Tip To view the Quick start instructions from the command line use: nextflow run tool_2.nf --help","title":"Options"},{"location":"running_2.html","text":"Running Tool 2 In order to run Tool 2 you need to enter two commands in the Terminal window. The Terminal is the black window within the right side of the MobaXterm window. First enter this command: cd ~/genome_tools/Tool_2 Then enter this command. Replace xxx with your chosen database: nextflow run tool_2.nf --customSeq 'xxx' If you do not include \u2013-customSeq 'xxx' Tool 2 will use the default test sequences. Example nextflow run tool_2.nf --customSeq '12P'","title":"Initiating Tool 2"},{"location":"running_2.html#running-tool-2","text":"In order to run Tool 2 you need to enter two commands in the Terminal window. The Terminal is the black window within the right side of the MobaXterm window. First enter this command: cd ~/genome_tools/Tool_2 Then enter this command. Replace xxx with your chosen database: nextflow run tool_2.nf --customSeq 'xxx' If you do not include \u2013-customSeq 'xxx' Tool 2 will use the default test sequences. Example nextflow run tool_2.nf --customSeq '12P'","title":"Running Tool 2"},{"location":"troubleshooting_2.html","text":"Troubleshooting These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"},{"location":"troubleshooting_2.html#troubleshooting","text":"These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"},{"location":"unloading_2.html","text":"Downloading the output files To transfer the files to your personal computer drag and drop. Each time Tool 2 runs it makes a new folder inside the output folder, output_tool2 , which can be found here: ~/genome_tools/Tool_2/output_tool2/ The output folders are named according to the run parameters: /xxx-yy-zz_YYYY-MM-DD_HH:MM The name of the new folder includes the ABRicate database you specified when you started the run ( xxx ), as well as the identity and coverage settings ( yy and xx ). This is followed by the date and time ( YYYY-MM-DD_HH:MM ).","title":"Downloading outputs"},{"location":"unloading_2.html#downloading-the-output-files","text":"To transfer the files to your personal computer drag and drop. Each time Tool 2 runs it makes a new folder inside the output folder, output_tool2 , which can be found here: ~/genome_tools/Tool_2/output_tool2/ The output folders are named according to the run parameters: /xxx-yy-zz_YYYY-MM-DD_HH:MM The name of the new folder includes the ABRicate database you specified when you started the run ( xxx ), as well as the identity and coverage settings ( yy and xx ). This is followed by the date and time ( YYYY-MM-DD_HH:MM ).","title":"Downloading the output files"}]}